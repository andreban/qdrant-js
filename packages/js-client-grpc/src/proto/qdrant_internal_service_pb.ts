// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file qdrant_internal_service.proto (package qdrant, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message qdrant.HttpPortRequest
 */
export class HttpPortRequest extends Message<HttpPortRequest> {
  constructor(data?: PartialMessage<HttpPortRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.HttpPortRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpPortRequest {
    return new HttpPortRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpPortRequest {
    return new HttpPortRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpPortRequest {
    return new HttpPortRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HttpPortRequest | PlainMessage<HttpPortRequest> | undefined, b: HttpPortRequest | PlainMessage<HttpPortRequest> | undefined): boolean {
    return proto3.util.equals(HttpPortRequest, a, b);
  }
}

/**
 * @generated from message qdrant.HttpPortResponse
 */
export class HttpPortResponse extends Message<HttpPortResponse> {
  /**
   * @generated from field: int32 port = 1;
   */
  port = 0;

  constructor(data?: PartialMessage<HttpPortResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "qdrant.HttpPortResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpPortResponse {
    return new HttpPortResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpPortResponse {
    return new HttpPortResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpPortResponse {
    return new HttpPortResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HttpPortResponse | PlainMessage<HttpPortResponse> | undefined, b: HttpPortResponse | PlainMessage<HttpPortResponse> | undefined): boolean {
    return proto3.util.equals(HttpPortResponse, a, b);
  }
}

